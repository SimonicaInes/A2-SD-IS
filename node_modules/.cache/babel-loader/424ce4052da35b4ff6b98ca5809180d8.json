{"ast":null,"code":"import _objectSpread from \"F:\\\\Facultate\\\\SD\\\\ASSIGNMENT 2\\\\assignment-2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { EventEmitter } from \"events\";\n\nclass Model extends EventEmitter {\n  constructor() {\n    super();\n    this.state = {\n      questions: [{\n        title: \"Blender3D\",\n        question: \"What does it do?\",\n        author: \"Ines\",\n        date: \"01/02/2013\",\n        tags: \"Blender\"\n      }, {\n        title: \"Kittens\",\n        question: \"Are they fluffy?\",\n        author: \"Maria\",\n        date: \"23/04/2011\",\n        tags: \"Pets\"\n      }],\n      newQuestion: {\n        title: \"\",\n        question: \"\",\n        author: \"\",\n        date: \"\",\n        tags: \"\"\n      },\n      filteredQuestions: []\n    };\n  }\n\n  addQuestion(title, question, author, date, tags) {\n    this.state = _objectSpread({}, this.state, {\n      questions: this.state.questions.concat([{\n        title: title,\n        question: question,\n        author: author,\n        date: date,\n        tags: tags\n      }])\n    });\n    this.emit(\"change\", this.state);\n  }\n\n  changeNewQuestionProperty(property, value) {\n    this.state = _objectSpread({}, this.state, {\n      newQuestion: _objectSpread({}, this.state.newQuestion, {\n        [property]: value\n      })\n    });\n    this.emit(\"change\", this.state);\n  }\n\n  swapToFilter(property, value) {\n    this.state = _objectSpread({}, this.state, {\n      [property]: value\n    });\n    this.emit(\"change\", this.state);\n  }\n\n  filterByTitle() {\n    debugger;\n    const filterResult = this.state.questions.filter(post => post.title === this.state.toFilter);\n    this.state = _objectSpread({}, this.state, {\n      filterQuestions: filterResult\n    });\n  }\n\n}\n\nconst model = new Model();\nexport default model;","map":{"version":3,"sources":["F:\\Facultate\\SD\\ASSIGNMENT 2\\assignment-2\\src\\model\\model.js"],"names":["EventEmitter","Model","constructor","state","questions","title","question","author","date","tags","newQuestion","filteredQuestions","addQuestion","concat","emit","changeNewQuestionProperty","property","value","swapToFilter","filterByTitle","filterResult","filter","post","toFilter","filterQuestions","model"],"mappings":";AAAA,SAAQA,YAAR,QAA2B,QAA3B;;AAEA,MAAMC,KAAN,SAAoBD,YAApB,CAAgC;AAC3BE,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAW;AACPC,MAAAA,SAAS,EAAE,CAAC;AACRC,QAAAA,KAAK,EAAE,WADC;AAERC,QAAAA,QAAQ,EAAE,kBAFF;AAGRC,QAAAA,MAAM,EAAE,MAHA;AAIRC,QAAAA,IAAI,EAAE,YAJE;AAKRC,QAAAA,IAAI,EAAE;AALE,OAAD,EAOR;AACCJ,QAAAA,KAAK,EAAE,SADR;AAECC,QAAAA,QAAQ,EAAE,kBAFX;AAGCC,QAAAA,MAAM,EAAE,OAHT;AAICC,QAAAA,IAAI,EAAC,YAJN;AAKCC,QAAAA,IAAI,EAAE;AALP,OAPQ,CADJ;AAgBPC,MAAAA,WAAW,EAAE;AACTL,QAAAA,KAAK,EAAE,EADE;AAETC,QAAAA,QAAQ,EAAE,EAFD;AAGTC,QAAAA,MAAM,EAAE,EAHC;AAITC,QAAAA,IAAI,EAAE,EAJG;AAKTC,QAAAA,IAAI,EAAE;AALG,OAhBN;AAuBPE,MAAAA,iBAAiB,EAAE;AAvBZ,KAAX;AA0BH;;AACDC,EAAAA,WAAW,CAACP,KAAD,EAAQC,QAAR,EAAkBC,MAAlB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAqC;AAC7C,SAAKN,KAAL,qBACO,KAAKA,KADZ;AAEIC,MAAAA,SAAS,EAAC,KAAKD,KAAL,CAAWC,SAAX,CAAqBS,MAArB,CAA4B,CAAC;AACnCR,QAAAA,KAAK,EAAEA,KAD4B;AAEnCC,QAAAA,QAAQ,EAAEA,QAFyB;AAGnCC,QAAAA,MAAM,EAAEA,MAH2B;AAInCC,QAAAA,IAAI,EAAEA,IAJ6B;AAKnCC,QAAAA,IAAI,EAAEA;AAL6B,OAAD,CAA5B;AAFd;AAUA,SAAKK,IAAL,CAAU,QAAV,EAAoB,KAAKX,KAAzB;AAEH;;AAEAY,EAAAA,yBAAyB,CAACC,QAAD,EAAWC,KAAX,EAAiB;AACtC,SAAKd,KAAL,qBACO,KAAKA,KADZ;AAEIO,MAAAA,WAAW,oBACJ,KAAKP,KAAL,CAAWO,WADP;AAEP,SAACM,QAAD,GAAYC;AAFL;AAFf;AAOA,SAAKH,IAAL,CAAU,QAAV,EAAoB,KAAKX,KAAzB;AACH;;AAEDe,EAAAA,YAAY,CAACF,QAAD,EAAWC,KAAX,EAAiB;AACzB,SAAKd,KAAL,qBACO,KAAKA,KADZ;AAEI,OAACa,QAAD,GAAWC;AAFf;AAIA,SAAKH,IAAL,CAAU,QAAV,EAAoB,KAAKX,KAAzB;AACH;;AACDgB,EAAAA,aAAa,GAAE;AACX;AACA,UAAMC,YAAY,GAAG,KAAKjB,KAAL,CAAWC,SAAX,CAAqBiB,MAArB,CAA4BC,IAAI,IAAEA,IAAI,CAACjB,KAAL,KAAa,KAAKF,KAAL,CAAWoB,QAA1D,CAArB;AACA,SAAKpB,KAAL,qBACO,KAAKA,KADZ;AAEIqB,MAAAA,eAAe,EAAEJ;AAFrB;AAIH;;AAtE0B;;AAwEhC,MAAMK,KAAK,GAAG,IAAIxB,KAAJ,EAAd;AACA,eAAewB,KAAf","sourcesContent":["import {EventEmitter} from \"events\";\r\n\r\nclass Model extends EventEmitter{\r\n     constructor(){\r\n         super();\r\n         this.state={\r\n             questions: [{\r\n                 title: \"Blender3D\",\r\n                 question: \"What does it do?\",\r\n                 author: \"Ines\",\r\n                 date: \"01/02/2013\",\r\n                 tags: \"Blender\"\r\n\r\n             }, {\r\n                 title: \"Kittens\",\r\n                 question: \"Are they fluffy?\",\r\n                 author: \"Maria\",\r\n                 date:\"23/04/2011\",\r\n                 tags: \"Pets\"\r\n                }],\r\n\r\n             newQuestion: {\r\n                 title: \"\",\r\n                 question: \"\",\r\n                 author: \"\",\r\n                 date: \"\",\r\n                 tags: \"\"\r\n             },\r\n             filteredQuestions: []\r\n\r\n         };\r\n     }\r\n     addQuestion(title, question, author, date, tags){\r\n        this.state={\r\n            ...this.state,\r\n            questions:this.state.questions.concat([{\r\n                title: title,\r\n                question: question,\r\n                author: author,\r\n                date: date,\r\n                tags: tags\r\n            }])\r\n        };\r\n        this.emit(\"change\", this.state);\r\n\r\n    }\r\n\r\n     changeNewQuestionProperty(property, value){\r\n         this.state= {\r\n             ...this.state,\r\n             newQuestion:{\r\n                 ...this.state.newQuestion,\r\n                 [property]: value\r\n             }\r\n         };\r\n         this.emit(\"change\", this.state);\r\n     }\r\n\r\n     swapToFilter(property, value){\r\n         this.state={\r\n             ...this.state,\r\n             [property]:value\r\n         };\r\n         this.emit(\"change\", this.state);\r\n     }\r\n     filterByTitle(){\r\n         debugger;\r\n         const filterResult = this.state.questions.filter(post=>post.title===this.state.toFilter)\r\n         this.state = {\r\n             ...this.state,\r\n             filterQuestions: filterResult\r\n         };\r\n     }\r\n}\r\nconst model = new Model();\r\nexport default model;"]},"metadata":{},"sourceType":"module"}